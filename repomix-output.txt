This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-20T02:41:03.720Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
ai-dev-guideline.md
core/schemas/feedback.schema.json
core/schemas/session.schema.json
core/schemas/task.schema.json
core/templates/docs/feedback.json
core/templates/docs/session.json
core/templates/docs/task.json
core/templates/frontend/css/main.css
core/templates/frontend/html/index.html
core/templates/frontend/js/main.js
core/templates/vba/Main.bas
docs/phases/phase0.md
docs/project-templates/frontend-template/ai-context/project-metadata.json
docs/project-templates/frontend-template/README.md
docs/project-templates/vba-template/ai-context/project-metadata.json
docs/project-templates/vba-template/README.md
README.md

================================================================
Files
================================================================

================
File: ai-dev-guideline.md
================
# AI駆動開発のための包括的ガイドライン

## 1. 目的と基本理念

本ガイドラインは、AI駆動開発を統制された情報フローの下で効率的に実施するための指針です。「すべてをまずは機械向けに正しく構造化し、必要に応じて人間向けに変換する」という基本理念に基づき、プロジェクト全体の一貫性と品質を確保します。

### 1.1 ブートストラップ問題への対応

AI駆動開発のガイドラインを導入する際に「ガイドライン自体の導入にもAIを活用したい」という循環的な状況が発生します。この「ブートストラップ問題」を解決するため、本ガイドラインでは段階的アプローチを採用し、最小限の基盤（フェーズ0）から始めて徐々に完全な実装へと発展させることを推奨します。

## 2. 導入フェーズの全体像

プロジェクトへのAI駆動開発導入は、以下のフェーズで段階的に行います：

```
フェーズ0（2週間）→ フェーズ1（4週間）→ フェーズ2（3週間）→ フェーズ3（3週間）→ フェーズ4（2週間）→ フェーズ5（3週間）
```

各フェーズの概要：
- **フェーズ0**: ミニマルAI駆動開発基盤の構築（ブートストラップ）
- **フェーズ1**: 情報フロー基盤の構築
- **フェーズ2**: DDD的な役割分離の導入
- **フェーズ3**: TDD（テスト駆動開発）の組み込み
- **フェーズ4**: 設計原則・手法のルール化
- **フェーズ5**: BDDとCI/CD連携の確立

## 3. フェーズ0：ミニマルAI駆動開発基盤の構築

### 3.1 目的と位置づけ

フェーズ0は、本格的なガイドライン導入前に最小限の仕組みを構築し、その後のフェーズをAI駆動で効率的に実装するための基盤となります。複雑なフレームワークやツールは使わず、シンプルなアプローチで迅速に導入できることを重視します。

### 3.2 コアコンポーネント

#### 3.2.1 タスク分解・追跡システム

**目的**: ユーザーからの大きな指示を、AIが処理可能な粒度のタスクに分解し追跡する仕組み

**ミニマル実装**:
```json
{
  "project": "ユーザー管理システム開発",
  "original_request": "ユーザー登録機能とプロフィール編集機能を実装してください",
  "decomposed_tasks": [
    {
      "id": "T001",
      "title": "ユーザーエンティティ設計",
      "description": "ユーザーの属性とメソッドを定義",
      "status": "completed",
      "dependencies": []
    },
    {
      "id": "T002",
      "title": "ユーザー登録API実装",
      "description": "新規ユーザー登録エンドポイントの作成",
      "status": "in_progress",
      "dependencies": ["T001"]
    },
    {
      "id": "T003",
      "title": "プロフィール編集API実装",
      "description": "既存ユーザー情報更新エンドポイントの作成",
      "status": "pending",
      "dependencies": ["T001"]
    }
  ],
  "current_focus": "T002"
}
```

**発展性**: フェーズ1でJSONスキーマによる検証を追加し、フェーズ2でDDDコンテキストに基づくタスク分類を導入、フェーズ5でCI/CDと連携させた自動タスク追跡へ発展。

#### 3.2.2 セッション間状態保持

**目的**: 複数のAI対話セッションをまたいで開発コンテキストを維持する仕組み

**ミニマル実装**:
```json
{
  "session_handover": {
    "project_id": "USER-SYS-2025",
    "session_timestamp": "2025-03-20T15:30:00Z",
    "project_state_summary": {
      "completed_tasks": ["T001"],
      "current_tasks": ["T002"],
      "pending_tasks": ["T003", "T004"]
    },
    "key_artifacts": {
      "User.ts": "User entity with email and password fields",
      "UserRepository.ts": "Interface for user persistence",
      "auth.ts": "Authentication utilities"
    },
    "current_challenges": [
      "Email validation needs improvement",
      "Password hashing implementation pending"
    ],
    "next_session_focus": "Complete T002 and begin T003"
  }
}
```

**発展性**: フェーズ1でより詳細な構造定義を追加、フェーズ3でテスト結果の継続的な引継ぎを含める、フェーズ5でバージョン管理システムと連携した状態管理へと発展。

#### 3.2.3 シンプルなフィードバックループ

**目的**: 実装結果の検証とそのフィードバックを開発フローに反映する基本的な仕組み

**ミニマル実装**:
```json
{
  "feedback_loop": {
    "task_id": "T002",
    "implementation_attempt": 1,
    "verification_results": {
      "passes_tests": false,
      "failed_tests": [
        {
          "test_name": "should_reject_invalid_email",
          "error": "Expected validation error but got success"
        }
      ],
      "suggestions": [
        "Add regex validation for email format",
        "Implement proper error handling for invalid inputs"
      ]
    },
    "iteration_plan": {
      "focus_areas": ["Email validation logic", "Error response formatting"],
      "approach": "Refactor validation method with regex pattern"
    }
  }
}
```

**発展性**: フェーズ3でTDDフローへの組み込み、フェーズ4で設計パターンとの整合性検証の追加、フェーズ5で自動テスト実行とフィードバック生成の仕組みへ発展。

#### 3.2.4 最小限の標準化テンプレート

**目的**: 基本的なコード構造とドキュメント形式を標準化し、一貫性を確保

**ミニマル実装**: 基本的なコードテンプレート例
```typescript
// エンティティテンプレート
export class Entity {
  constructor(private readonly id: string) {}
  
  public getId(): string {
    return this.id;
  }
}

// リポジトリインターフェーステンプレート
export interface Repository<T> {
  findById(id: string): Promise<T | null>;
  save(entity: T): Promise<void>;
  delete(id: string): Promise<void>;
}

// テストテンプレート
describe('Entity', () => {
  it('should create entity with valid id', () => {
    // テスト実装
  });
});
```

**発展性**: フェーズ1でJSONテンプレートの体系化、フェーズ2でDDDパターンの標準テンプレート追加、フェーズ4で高度な設計パターンをテンプレート化、フェーズ5でBDDシナリオテンプレートを統合。

### 3.3 フェーズ0実装ガイド

1. **環境準備**: シンプルなGitリポジトリを用意し、基本的なディレクトリ構造を作成
2. **テンプレート作成**: 最小限のコードテンプレートとドキュメントテンプレートを定義
3. **タスク管理**: タスク分解と追跡のためのJSONファイル形式を定義
4. **状態管理**: セッション間の状態引継ぎフォーマットを定義
5. **フィードバック**: シンプルなテスト実行と結果フィードバックの流れを確立

### 3.4 成功指標

- ユーザー指示を5分以内に実行可能なタスクに分解できる
- セッションを跨いでも開発コンテキストを90%以上維持できる
- テスト結果から自動的に修正方針を導出できる
- 基本的なコード生成が一貫した構造で行える

## 4. ステップバイステップ実装ガイド（フェーズ1-5）

### 4.1 フェーズ1: 情報フローの設計と実装

#### 4.1.1 フェーズ0からの発展

フェーズ0で構築したミニマル基盤を以下のように拡張します：

- **タスク分解・追跡**: JSONスキーマによる厳密な構造定義を追加
- **セッション間状態**: より詳細な構造化と検証メカニズムを導入
- **標準化テンプレート**: 包括的なJSONテンプレートライブラリに発展

#### 4.1.2 プロジェクトドキュメントのJSON化

**実装内容：**
- プロジェクト要件、非機能要件、ビジネス背景、ステークホルダー情報を包括的にJSON形式で文書化
- すべての仕様と制約を階層的に構造化

**具体的な手順：**
1. プロジェクト基本情報を定義するJSONテンプレートを作成
```json
{
  "project_name": "AI駆動開発プロジェクト",
  "version": "1.0.0",
  "last_updated": "2025-03-16",
  "business_context": {
    "overview": "...",
    "goals": ["...", "..."],
    "success_criteria": ["...", "..."]
  },
  "stakeholders": [
    {
      "role": "プロダクトオーナー",
      "responsibilities": ["要件定義", "優先順位付け"]
    },
    ...
  ],
  "non_functional_requirements": {
    "performance": {...},
    "security": {...},
    "scalability": {...}
  }
}
```

2. 機能要件をコンテキスト別にJSONファイルとして分割
3. バージョン管理システムにドキュメントを登録（ファイル命名規則：`<context>_requirements.json`）

#### 4.1.3 JSON Schemaによる構造・制約の定義

**実装内容：**
- すべてのJSONドキュメントに対応するJSON Schemaを作成
- 型チェック、必須項目、値の範囲などを定義

**具体的な手順：**
1. 各JSONドキュメントに対するスキーマファイルを作成（ファイル命名規則：`<document_name>.schema.json`）
2. 以下の要素を必ず含める：
   - 型定義（string, number, object, array など）
   - 必須プロパティ（required配列）
   - プロパティの制約（minLength, maxLength, pattern など）
   - 列挙型の場合は必ず許容値を明示（enum）

#### 4.1.4 JSON-RPCによるAIとのインターフェース定義

**実装内容：**
- AIへの指示（タスク実行リクエスト）をJSON-RPC 2.0形式で標準化
- よく使われるメソッドのカタログ化

**具体的な手順：**
1. プロジェクトで使用するJSON-RPCメソッドの一覧を定義
2. 各メソッドのパラメータ仕様をJSON Schemaで定義
3. レスポンス形式の標準化

#### 4.1.5 JSON Logicによる複雑なビジネスルールの定義

**実装内容：**
- 条件分岐を含む複雑なビジネスルールをJSON Logic形式で表現
- AIによる正確な解釈のための標準化

### 4.2 フェーズ2: DDD的な役割分離の組み込み

#### 4.2.1 フェーズ0・1からの発展

フェーズ0・1の基盤を以下のように発展させます：

- **タスク分解・追跡**: ドメインコンテキストに基づく分類を追加
- **セッション間状態**: ドメインモデルの状態管理を強化
- **標準化テンプレート**: DDDパターンに基づくテンプレートを追加

#### 4.2.2 境界付けられたコンテキストの定義

**実装内容：**
- プロジェクトの業務領域を「境界付けられたコンテキスト」として分割
- コンテキスト間の関係性を明示

**具体的な手順：**
1. コンテキストマップの作成
```json
{
  "contexts": [
    {
      "name": "ユーザー管理",
      "responsibility": "ユーザー登録、認証、権限管理",
      "ubiquitous_language": {
        "User": "システムにアクセスする個人または組織",
        "Role": "特定の権限セット",
        "Permission": "特定の操作を実行する能力"
      }
    },
    {
      "name": "コンテンツ管理",
      "responsibility": "記事、メディア、タグの管理",
      ...
    },
    ...
  ],
  "context_relationships": [
    {
      "source": "ユーザー管理",
      "target": "コンテンツ管理",
      "type": "UPSTREAM_DOWNSTREAM",
      "anti_corruption_layer": true
    },
    ...
  ]
}
```

#### 4.2.3 ユビキタス言語の定義と管理

**実装内容：**
- 各コンテキストの専門用語を定義
- JSONによる用語集の管理

### 4.3 フェーズ3: TDD（テスト駆動開発）の組み込み

#### 4.3.1 フェーズ0-2からの発展

フェーズ0-2の基盤を以下のように発展させます：

- **シンプルなフィードバックループ**: 本格的なTDDサイクルへ拡張
- **標準化テンプレート**: テスト優先のテンプレートに発展
- **セッション間状態**: テスト結果の継続的な追跡と引継ぎ

#### 4.3.2 テストファースト開発の仕組み化

**実装内容：**
- AIコード生成前のテストケース作成フローを確立
- テスト仕様のJSON形式での標準化

**具体的な手順：**
1. テスト仕様のJSON Schemaを定義
2. テスト生成用のJSON-RPCメソッドを定義
3. テスト生成→テスト確認→コード生成の順序を強制するワークフロー構築

#### 4.3.3 テスト自動化と継続的検証

**実装内容：**
- AIが生成したテストの自動実行環境の構築
- テストカバレッジ計測と品質指標の設定

### 4.4 フェーズ4: 設計原則・手法のルール化

#### 4.4.1 フェーズ0-3からの発展

フェーズ0-3の基盤を以下のように発展させます：

- **最小限の標準化テンプレート**: 高度な設計パターンを組み込んだテンプレートへ発展
- **タスク分解・追跡**: 設計原則に基づく評価基準を追加
- **フィードバックループ**: 設計品質の評価を組み込み

#### 4.4.2 採用する設計原則の明確化

**実装内容：**
- プロジェクトで採用する設計原則の定義
- AIコード生成時に適用すべき原則の標準化

#### 4.4.3 設計パターンの標準化

**実装内容：**
- プロジェクトで使用する設計パターンのカタログ作成
- パターン適用時の命名規則・実装規約の定義

### 4.5 フェーズ5: CI/CDやBDDの開発プロセス組み込み

#### 4.5.1 フェーズ0-4からの発展

フェーズ0-4の基盤を以下のように発展させます：

- **タスク分解・追跡**: CI/CDパイプラインと連携した自動化
- **セッション間状態**: バージョン管理システムと連携した状態管理
- **フィードバックループ**: 自動テスト実行とフィードバック生成
- **標準化テンプレート**: BDDシナリオテンプレートの統合

#### 4.5.2 継続的インテグレーション/デリバリーの構築

**実装内容：**
- AIと連携した自動化CI/CDパイプラインの設計
- バリデーション、テスト、デプロイの自動化

#### 4.5.3 振る舞い駆動開発（BDD）の導入

**実装内容：**
- ビジネスシナリオの構造化記述と自動テスト連携
- AI駆動で振る舞い仕様から実装へのフロー確立

## 5. プランニングフローの実装

プランニングフローは、アーキテクチャ図に基づいて以下のコンポーネントで構成します：

### 5.1 コンポーネント構成

```json
{
  "components": {
    "User": {
      "responsibility": "開発指示や要件の入力、結果の確認を行う人間のユーザー",
      "interfaces": ["execute"]
    },
    "PlanningFlow": {
      "responsibility": "全体のワークフローを管理し、ステップの進行を制御",
      "interfaces": ["execute", "createPlan", "processPlanCompletion"]
    },
    "PlanningTool": {
      "responsibility": "タスクの分解、ステップの生成、進捗管理を担当",
      "interfaces": ["createPlan", "getPlanInfo", "markStepComplete"]
    },
    "Executor": {
      "responsibility": "実際のタスク実行を担当し、LLMとの通信を行う",
      "interfaces": ["executeStep", "processResult"]
    },
    "LLM": {
      "responsibility": "AI処理の実行（コード生成、レビュー、ドキュメント生成等）",
      "interfaces": ["executeTask"]
    }
  }
}
```

### 5.2 情報フロー詳細定義

各フェーズで整備された情報フローを、プランニングフローのコンポーネント間連携に適用します。

## 6. 具体的な実装テンプレート

### 6.1 JSON-RPC リクエスト例（コード生成）

```json
{
  "jsonrpc": "2.0",
  "method": "generate_code",
  "params": {
    "context": "ユーザー管理",
    "entity": "User",
    "requirements": {
      "attributes": [
        {"name": "id", "type": "string", "required": true},
        {"name": "email", "type": "string", "required": true, "validation": "email"},
        {"name": "name", "type": "string", "required": true},
        {"name": "password", "type": "string", "required": true, "minLength": 8}
      ],
      "behaviors": [
        {"name": "register", "description": "新規ユーザー登録処理"},
        {"name": "authenticate", "description": "認証処理"},
        {"name": "updateProfile", "description": "プロフィール更新処理"}
      ],
      "constraints": [
        "メールアドレスはユニークであること",
        "パスワードは8文字以上で、英数字と特殊文字を含むこと"
      ]
    },
    "design_principles": ["SRP", "OCP"],
    "patterns": ["repository", "factory"],
    "output_language": "typescript",
    "architecture": "hexagonal"
  },
  "id": 1
}
```

### 6.2 JSON-RPC レスポンス例

レスポンス例略（前回提示した内容に相当）

## 7. プロジェクト管理と品質監視

### 7.1 メトリクス収集と分析

AI駆動開発の効果を測定するために、以下のメトリクスを収集・分析します：

```json
{
  "metrics": {
    "development_velocity": {
      "story_points_per_iteration": {"target": 20, "min_acceptable": 15},
      "code_generation_to_production_time": {"target": "2 days", "max_acceptable": "5 days"}
    },
    "quality": {
      "defect_rate": {"target": "< 0.5 per 1000 LOC", "max_acceptable": "2 per 1000 LOC"},
      "test_coverage": {"target": "> 90%", "min_acceptable": "80%"},
      "ai_code_acceptance_rate": {"target": "> 80%", "min_acceptable": "60%"}
    },
    "ai_effectiveness": {
      "prompt_iteration_count": {"target": "< 2", "max_acceptable": 4},
      "human_modification_ratio": {"target": "< 20%", "max_acceptable": "40%"}
    }
  }
}
```

### 7.2 フィードバックループの確立

各フェーズにおけるフィードバックループの発展を踏まえ、最終的な形態を実現します。

## 8. 段階的導入ロードマップ（更新版）

### 8.1 フェーズ0: ミニマルAI駆動開発基盤の構築（2週間）

**目的**: ブートストラップ問題を解決し、後続フェーズの実装基盤を整備

**タスク**:
- タスク分解・追跡システムの最小実装
- セッション間状態保持の仕組み構築
- シンプルなフィードバックループ確立
- 最小限の標準化テンプレート整備

**成功指標**:
- ユーザー指示を5分以内に実行可能なタスクに分解できる
- セッションを跨いで開発コンテキストを90%以上維持できる
- テスト結果から自動的に修正方針を導出できる
- 基本的なコード生成が一貫した構造で行える

### 8.2 フェーズ1: 情報フロー基盤の構築（4週間）

**目的**: 情報の構造化と検証の仕組みを整備

**タスク**:
- JSONドキュメント形式の標準化
- JSON Schema定義
- JSON-RPCインターフェース設計
- JSON Logicによるルール表現

**成功指標**:
- 全プロジェクト要件がJSON形式で文書化されている
- JSON Schemaによるバリデーションが自動化されている
- 基本的なJSON-RPCインターフェースが実装されている

### 8.3 フェーズ2: DDD的な役割分離の導入（3週間）

**目的**: ドメイン境界の明確化とユビキタス言語の確立

**タスク**:
- コンテキストマップ作成
- 各コンテキストのユビキタス言語定義
- コンテキスト間のインターフェース設計

**成功指標**:
- 境界付けられたコンテキストが明確に定義されている
- 各コンテキストにユビキタス言語が定義されている
- コンテキスト間の関係性が文書化されている

### 8.4 フェーズ3: TDD導入（3週間）

**目的**: テスト駆動開発プロセスの確立

**タスク**:
- テスト仕様のJSON形式標準化
- AIによるテスト生成フロー構築
- テスト自動化環境整備

**成功指標**:
- コード生成前にテストが作成される割合が90%以上
- テストカバレッジが80%以上
- テスト結果のフィードバックループが確立されている

### 8.5 フェーズ4: 設計原則とパターン適用（2週間）

**目的**: 設計原則とパターンの標準化

**タスク**:
- 設計原則の選定と文書化
- 設計パターンカタログ作成
- AIコード生成への適用方法確立

**成功指標**:
- 設計原則準拠度の自動評価が可能
- 設計パターンが実装に一貫して適用される
- 設計に関するフィードバックが迅速に反映される

### 8.6 フェーズ5: BDDとCI/CD連携（3週間）

**目的**: 振る舞い駆動開発とCI/CD連携の確立

**タスク**:
- BDD仕様のJSON形式標準化
- BDDからテスト自動生成フロー構築
- CI/CDパイプラインとの統合

**成功指標**:
- ビジネス要件がGherkin/JSONで表現され自動テストに変換される
- CI/CDパイプラインでの自動検証が実現している
- デプロイまでの自動化が完了している

## 9. まとめ

本ガイドラインは、AI駆動開発を統制された情報フローのもとで効率的に実施するための包括的な指針です。ブートストラップ問題に対応するため、フェーズ0からの段階的な導入を推奨し、各フェーズでの基盤の発展性を重視しています。

ミニマルな基盤から始め、徐々に高度な実装へと発展させることで、「すべてをまずは機械向けに正しく構造化し、必要に応じて人間向けに変換する」という基本理念を実現し、AI駆動開発の効率と品質を最大化することができます。

プロジェクトの規模や特性に応じて、各フェーズの優先度や実装詳細を適宜調整しながら、継続的に改善していくアプローチを推奨します。

================
File: core/schemas/feedback.schema.json
================
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["feedback_loop"],
  "properties": {
    "feedback_loop": {
      "type": "object",
      "required": ["task_id", "implementation_attempt", "verification_results", "iteration_plan"],
      "properties": {
        "task_id": {
          "type": "string",
          "pattern": "^T[0-9]{3}$",
          "description": "フィードバック対象のタスクID"
        },
        "implementation_attempt": {
          "type": "integer",
          "minimum": 1,
          "description": "実装の試行回数"
        },
        "verification_results": {
          "type": "object",
          "required": ["passes_tests", "failed_tests", "suggestions"],
          "properties": {
            "passes_tests": {
              "type": "boolean",
              "description": "テストに合格したかどうか"
            },
            "failed_tests": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["test_name", "error"],
                "properties": {
                  "test_name": {
                    "type": "string",
                    "description": "失敗したテストの名前"
                  },
                  "error": {
                    "type": "string",
                    "description": "エラーメッセージ"
                  }
                }
              },
              "description": "失敗したテストのリスト"
            },
            "suggestions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "改善提案のリスト"
            }
          }
        },
        "iteration_plan": {
          "type": "object",
          "required": ["focus_areas", "approach"],
          "properties": {
            "focus_areas": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "次のイテレーションでの焦点領域"
            },
            "approach": {
              "type": "string",
              "description": "次のイテレーションでのアプローチ"
            }
          }
        }
      }
    }
  }
}

================
File: core/schemas/session.schema.json
================
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["session_handover"],
  "properties": {
    "session_handover": {
      "type": "object",
      "required": ["project_id", "session_timestamp", "project_state_summary", "next_session_focus"],
      "properties": {
        "project_id": {
          "type": "string",
          "description": "プロジェクトの一意識別子"
        },
        "session_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "セッションのタイムスタンプ（ISO 8601形式）"
        },
        "project_state_summary": {
          "type": "object",
          "required": ["completed_tasks", "current_tasks", "pending_tasks"],
          "properties": {
            "completed_tasks": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^T[0-9]{3}$"
              },
              "description": "完了したタスクIDのリスト"
            },
            "current_tasks": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^T[0-9]{3}$"
              },
              "description": "現在進行中のタスクIDのリスト"
            },
            "pending_tasks": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^T[0-9]{3}$"
              },
              "description": "保留中のタスクIDのリスト"
            }
          }
        },
        "key_artifacts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "重要なファイルとその説明のマップ"
        },
        "current_challenges": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "現在の課題のリスト"
        },
        "next_session_focus": {
          "type": "string",
          "description": "次のセッションでの焦点"
        }
      }
    }
  }
}

================
File: core/schemas/task.schema.json
================
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["project", "original_request", "decomposed_tasks", "current_focus"],
  "properties": {
    "project": {
      "type": "string",
      "description": "プロジェクト名"
    },
    "original_request": {
      "type": "string",
      "description": "ユーザーからの元の指示"
    },
    "decomposed_tasks": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["id", "title", "description", "status", "dependencies"],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^T[0-9]{3}$",
            "description": "タスクID（T001形式）"
          },
          "title": {
            "type": "string",
            "description": "タスクタイトル"
          },
          "description": {
            "type": "string",
            "description": "タスクの詳細説明"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed"],
            "description": "タスクの状態"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^T[0-9]{3}$"
            },
            "description": "依存するタスクIDのリスト"
          }
        }
      }
    },
    "current_focus": {
      "type": "string",
      "pattern": "^T[0-9]{3}$",
      "description": "現在フォーカスしているタスクID"
    }
  }
}

================
File: core/templates/docs/feedback.json
================
{
  "feedback_loop": {
    "task_id": "T001",
    "implementation_attempt": 1,
    "verification_results": {
      "passes_tests": false,
      "failed_tests": [
        {
          "test_name": "テスト名",
          "error": "エラー内容"
        }
      ],
      "suggestions": [
        "改善提案1",
        "改善提案2"
      ]
    },
    "iteration_plan": {
      "focus_areas": ["焦点領域1", "焦点領域2"],
      "approach": "次の改善アプローチ"
    }
  }
}

================
File: core/templates/docs/session.json
================
{
  "session_handover": {
    "project_id": "プロジェクトID",
    "session_timestamp": "2025-03-20T15:30:00Z",
    "project_state_summary": {
      "completed_tasks": [],
      "current_tasks": ["T001"],
      "pending_tasks": ["T002", "T003"]
    },
    "key_artifacts": {
      "ファイル名": "ファイルの簡単な説明"
    },
    "current_challenges": [
      "現在の課題1",
      "現在の課題2"
    ],
    "next_session_focus": "次のセッションでの焦点"
  }
}

================
File: core/templates/docs/task.json
================
{
  "project": "プロジェクト名",
  "original_request": "ユーザーからの元の指示",
  "decomposed_tasks": [
    {
      "id": "T001",
      "title": "タスクタイトル",
      "description": "タスクの詳細説明",
      "status": "pending",
      "dependencies": []
    }
  ],
  "current_focus": "T001"
}

================
File: core/templates/frontend/css/main.css
================
/**
 * @ai-metadata {
 *   "purpose": "メインCSSスタイルテンプレート",
 *   "dependencies": [],
 *   "lastModified": "2025-03-20"
 * }
 */

/* リセットとベーススタイル */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  line-height: 1.6;
  color: #333;
  background-color: #f4f4f4;
}

/* レイアウト */
.container {
  width: 80%;
  margin: 0 auto;
  overflow: hidden;
}

/* ヘッダー */
header {
  background: #333;
  color: #fff;
  padding: 1rem;
}

header h1 {
  margin: 0;
}

nav ul {
  display: flex;
  list-style: none;
}

nav ul li {
  margin-right: 1rem;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
}

/* メインコンテンツ */
main {
  padding: 2rem 0;
}

section {
  margin-bottom: 2rem;
}

/* フッター */
footer {
  background: #333;
  color: #fff;
  text-align: center;
  padding: 1rem;
  margin-top: 2rem;
}

/* レスポンシブデザイン */
@media (max-width: 768px) {
  .container {
    width: 95%;
  }
  
  nav ul {
    flex-direction: column;
  }
  
  nav ul li {
    margin-right: 0;
    margin-bottom: 0.5rem;
  }
}

================
File: core/templates/frontend/html/index.html
================
<!--
@ai-metadata {
  "purpose": "メインページテンプレート",
  "dependencies": ["../css/main.css", "../js/main.js"],
  "lastModified": "2025-03-20"
}
-->
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>プロジェクトタイトル</title>
  <link rel="stylesheet" href="styles/main.css">
</head>
<body>
  <header>
    <!-- ヘッダー -->
    <h1>プロジェクトタイトル</h1>
    <nav>
      <!-- ナビゲーション -->
      <ul>
        <li><a href="#">ホーム</a></li>
        <li><a href="#">機能</a></li>
        <li><a href="#">お問い合わせ</a></li>
      </ul>
    </nav>
  </header>

  <main>
    <!-- メインコンテンツ -->
    <section>
      <h2>セクションタイトル</h2>
      <p>コンテンツがここに入ります。</p>
    </section>
  </main>

  <footer>
    <!-- フッター -->
    <p>&copy; 2025 プロジェクト名</p>
  </footer>

  <script src="scripts/main.js"></script>
</body>
</html>

================
File: core/templates/frontend/js/main.js
================
/**
 * @ai-metadata {
 *   "purpose": "メインJavaScript機能テンプレート",
 *   "dependencies": [],
 *   "lastModified": "2025-03-20"
 * }
 */

// 初期化処理
document.addEventListener('DOMContentLoaded', function() {
  console.log('ページが読み込まれました');
  
  // イベントリスナーの設定
  setupEventListeners();
});

// イベントリスナー設定
function setupEventListeners() {
  // ここにイベントリスナーを追加
}

// データ処理関数
function processData(data) {
  // データ処理ロジック
  return data;
}

// ユーティリティ関数
function formatDate(date) {
  // 日付フォーマット処理
  return date.toISOString().split('T')[0];
}

================
File: core/templates/vba/Main.bas
================
' @ai-metadata {
'   "purpose": "メインVBAモジュールテンプレート",
'   "dependencies": [],
'   "exports": ["Initialize", "Main"],
'   "lastModified": "2025-03-20"
' }

Option Explicit

' 初期化処理
Public Sub Initialize()
    ' アプリケーションの初期化処理
    Debug.Print "アプリケーションを初期化しています..."
    
    ' ユーティリティの初期化
    Call InitializeUtilities
    
    ' フォームの表示
    ' UserForm1.Show
End Sub

' メイン処理
Public Sub Main()
    ' メイン処理ロジック
    Debug.Print "メイン処理を実行しています..."
    
    ' データ処理の呼び出し
    Call ProcessData
End Sub

' データ処理
Private Sub ProcessData()
    ' データ処理ロジック
    Debug.Print "データを処理しています..."
End Sub

' ユーティリティ初期化
Private Sub InitializeUtilities()
    ' ユーティリティの初期化処理
    Debug.Print "ユーティリティを初期化しています..."
End Sub

' エラーハンドリング
Public Sub HandleError(ByVal errNumber As Long, ByVal errDescription As String, ByVal errSource As String)
    ' エラー処理ロジック
    Debug.Print "エラーが発生しました: " & errNumber & " - " & errDescription & " (" & errSource & ")"
End Sub

================
File: docs/phases/phase0.md
================
# フェーズ0: ミニマルAI駆動開発基盤の構築

## 目的と位置づけ

フェーズ0は、本格的なガイドライン導入前に最小限の仕組みを構築し、その後のフェーズをAI駆動で効率的に実装するための基盤となります。複雑なフレームワークやツールは使わず、シンプルなアプローチで迅速に導入できることを重視します。

## 実装内容

### 1. 環境準備

#### 1.1 リポジトリ構造

knoaリポジトリは以下の基本構造を持ちます：

```
knoa/
├── core/                # AI駆動開発の共通コアコンポーネント
├── projects/            # 個別プロジェクトディレクトリ（サブモジュール）
└── docs/                # プロジェクト全体のドキュメント
```

#### 1.2 サブモジュール管理

各プロジェクトは独立したGitリポジトリとして管理し、knoaからはサブモジュールとして参照します。

```
[submodule "projects/project-a"]
	path = projects/project-a
	url = https://github.com/your-org/project-a.git
	branch = main
```

#### 1.3 プロジェクトテンプレート

新規プロジェクト用のテンプレートを用意しています：

- フロントエンドプロジェクトテンプレート（HTML/CSS/JavaScript）
- VBAプロジェクトテンプレート

### 2. コアコンポーネント

#### 2.1 タスク分解・追跡システム

ユーザーからの大きな指示を、AIが処理可能な粒度のタスクに分解し追跡する仕組みです。

**実装**:
- タスク定義テンプレート: `core/templates/docs/task.json`
- タスク定義スキーマ: `core/schemas/task.schema.json`

#### 2.2 セッション間状態保持

複数のAI対話セッションをまたいで開発コンテキストを維持する仕組みです。

**実装**:
- セッション状態テンプレート: `core/templates/docs/session.json`
- セッション状態スキーマ: `core/schemas/session.schema.json`

#### 2.3 シンプルなフィードバックループ

実装結果の検証とそのフィードバックを開発フローに反映する基本的な仕組みです。

**実装**:
- フィードバックテンプレート: `core/templates/docs/feedback.json`
- フィードバックスキーマ: `core/schemas/feedback.schema.json`

#### 2.4 最小限の標準化テンプレート

基本的なコード構造とドキュメント形式を標準化し、一貫性を確保します。

**実装**:
- フロントエンドテンプレート:
  - HTML: `core/templates/frontend/html/index.html`
  - CSS: `core/templates/frontend/css/main.css`
  - JavaScript: `core/templates/frontend/js/main.js`
- VBAテンプレート:
  - `core/templates/vba/Main.bas`

### 3. 情報の凝集性を高める工夫

#### 3.1 メタデータの活用

各ファイルの先頭に構造化されたコメントブロックを追加し、AIが理解しやすい形でメタ情報を提供します。

```html
<!--
@ai-metadata {
  "purpose": "メインページ",
  "dependencies": ["styles/main.css", "scripts/main.js"],
  "lastModified": "2025-03-20"
}
-->
```

#### 3.2 AI用コンテキスト情報の集約

各プロジェクト内に「ai-context」ディレクトリを設け、AIが参照・更新する情報を集約します。

```
ai-context/
├── project-metadata.json       # プロジェクトの基本情報
├── tasks/                      # タスク情報
├── sessions/                   # セッション情報
└── feedback/                   # フィードバック情報
```

## 使用方法

### 1. 新規プロジェクトの作成

1. `docs/project-templates`から適切なテンプレートを選択
2. プロジェクト用のリポジトリを作成し、テンプレートをコピー
3. knoaリポジトリにサブモジュールとして追加

### 2. タスク管理

1. ユーザーからの指示を受け取ったら、`ai-context/tasks/current-tasks.json`にタスクを分解して記録
2. タスクの状態を更新しながら開発を進行

### 3. セッション管理

1. セッション終了時に`ai-context/sessions/latest-session.json`に状態を保存
2. 次のセッション開始時に前回の状態を読み込み

### 4. フィードバック管理

1. 実装結果の検証後、`ai-context/feedback/pending-feedback.json`にフィードバックを記録
2. フィードバックに基づいて改善を実施

## 成功指標

- ユーザー指示を5分以内に実行可能なタスクに分解できる
- セッションを跨いでも開発コンテキストを90%以上維持できる
- テスト結果から自動的に修正方針を導出できる
- 基本的なコード生成が一貫した構造で行える

## 次のステップ

フェーズ0の基盤を活用して、フェーズ1「情報フロー基盤の構築」へと進みます。フェーズ1では以下を実装します：

- JSONドキュメント形式の標準化
- JSON Schema定義の拡充
- JSON-RPCインターフェース設計
- JSON Logicによるルール表現

================
File: docs/project-templates/frontend-template/ai-context/project-metadata.json
================
{
  "project_name": "フロントエンドプロジェクトテンプレート",
  "project_type": "frontend",
  "version": "1.0.0",
  "created_at": "2025-03-20T11:30:00Z",
  "last_updated": "2025-03-20T11:30:00Z",
  "description": "AI駆動開発のためのフロントエンドプロジェクト（HTML/CSS/JavaScript）の基本構造",
  "technologies": [
    "HTML5",
    "CSS3",
    "JavaScript"
  ],
  "structure": {
    "src": {
      "purpose": "ソースコード",
      "key_files": [
        {"path": "index.html", "purpose": "メインページ"},
        {"path": "styles/main.css", "purpose": "メインスタイル"},
        {"path": "scripts/main.js", "purpose": "メイン機能"}
      ]
    },
    "ai-context": {
      "purpose": "AI用コンテキスト情報",
      "key_files": [
        {"path": "project-metadata.json", "purpose": "プロジェクト情報"},
        {"path": "tasks/current-tasks.json", "purpose": "現在のタスク"}
      ]
    }
  },
  "domain_concepts": [],
  "development_flow": {
    "current_phase": "初期化",
    "next_steps": ["要件定義", "設計", "実装"]
  }
}

================
File: docs/project-templates/frontend-template/README.md
================
# フロントエンドプロジェクトテンプレート

## 概要
このテンプレートは、AI駆動開発のためのフロントエンドプロジェクト（HTML/CSS/JavaScript）の基本構造を提供します。

## 使い方

### 1. 新規リポジトリの作成
GitHub等で新しいリポジトリを作成します。

### 2. テンプレートのクローンと初期化
```bash
# テンプレートをクローン
git clone https://github.com/your-org/frontend-template.git new-project
cd new-project

# リモートの変更
git remote remove origin
git remote add origin https://github.com/your-org/new-project.git

# 初期コミットとプッシュ
git add .
git commit -m "Initial commit from template"
git push -u origin main
```

### 3. knoaリポジトリへのサブモジュール追加
```bash
cd /path/to/knoa
git submodule add https://github.com/your-org/new-project.git projects/new-project
git commit -m "Add new-project as submodule"
git push
```

## ディレクトリ構造
```
frontend-template/
├── README.md                # このファイル
├── .gitignore               # Git除外設定
├── ai-context/              # AI用コンテキスト情報
│   ├── project-metadata.json  # プロジェクトメタデータ
│   ├── tasks/               # タスク情報
│   ├── sessions/            # セッション情報
│   └── feedback/            # フィードバック情報
└── src/                     # ソースコード
    ├── index.html           # メインHTML
    ├── styles/              # CSSファイル
    │   └── main.css         # メインCSS
    ├── scripts/             # JavaScriptファイル
    │   └── main.js          # メインJS
    └── assets/              # 静的アセット
        ├── images/          # 画像ファイル
        └── fonts/           # フォントファイル
```

## AI駆動開発のポイント

### メタデータの活用
各ファイルの先頭には`@ai-metadata`コメントブロックを配置し、AIが理解しやすい形でメタ情報を提供しています。

```html
<!--
@ai-metadata {
  "purpose": "メインページ",
  "dependencies": ["styles/main.css", "scripts/main.js"],
  "lastModified": "2025-03-20"
}
-->
```

### AI用コンテキスト情報
`ai-context`ディレクトリには、AIが参照・更新する情報を集約しています。タスク、セッション、フィードバックの情報を構造化して管理します。

## カスタマイズ方法
1. `project-metadata.json`のプロジェクト情報を更新
2. `index.html`のタイトルとコンテンツを変更
3. `main.css`のスタイルをプロジェクトに合わせて調整
4. `main.js`の機能を実装

## ライセンス
OSSとして公開（ライセンスを指定）

================
File: docs/project-templates/vba-template/ai-context/project-metadata.json
================
{
  "project_name": "VBAプロジェクトテンプレート",
  "project_type": "vba",
  "version": "1.0.0",
  "created_at": "2025-03-20T11:30:00Z",
  "last_updated": "2025-03-20T11:30:00Z",
  "description": "AI駆動開発のためのVBAプロジェクトの基本構造",
  "technologies": [
    "VBA",
    "Excel",
    "Access"
  ],
  "structure": {
    "src": {
      "purpose": "ソースコード",
      "key_files": [
        {"path": "modules/Main.bas", "purpose": "メインモジュール"},
        {"path": "modules/Utilities.bas", "purpose": "ユーティリティモジュール"},
        {"path": "forms/UserForm1.frm", "purpose": "サンプルフォーム"},
        {"path": "class-modules/DataProcessor.cls", "purpose": "データ処理クラス"}
      ]
    },
    "ai-context": {
      "purpose": "AI用コンテキスト情報",
      "key_files": [
        {"path": "project-metadata.json", "purpose": "プロジェクト情報"},
        {"path": "tasks/current-tasks.json", "purpose": "現在のタスク"}
      ]
    }
  },
  "domain_concepts": [],
  "development_flow": {
    "current_phase": "初期化",
    "next_steps": ["要件定義", "設計", "実装"]
  }
}

================
File: docs/project-templates/vba-template/README.md
================
# VBAプロジェクトテンプレート

## 概要
このテンプレートは、AI駆動開発のためのVBAプロジェクトの基本構造を提供します。Excel、Access、Wordなどで使用するVBAモジュールの開発に適しています。

## 使い方

### 1. 新規リポジトリの作成
GitHub等で新しいリポジトリを作成します。

### 2. テンプレートのクローンと初期化
```bash
# テンプレートをクローン
git clone https://github.com/your-org/vba-template.git new-vba-project
cd new-vba-project

# リモートの変更
git remote remove origin
git remote add origin https://github.com/your-org/new-vba-project.git

# 初期コミットとプッシュ
git add .
git commit -m "Initial commit from template"
git push -u origin main
```

### 3. knoaリポジトリへのサブモジュール追加
```bash
cd /path/to/knoa
git submodule add https://github.com/your-org/new-vba-project.git projects/new-vba-project
git commit -m "Add new-vba-project as submodule"
git push
```

## ディレクトリ構造
```
vba-template/
├── README.md                # このファイル
├── .gitignore               # Git除外設定
├── ai-context/              # AI用コンテキスト情報
│   ├── project-metadata.json  # プロジェクトメタデータ
│   ├── tasks/               # タスク情報
│   ├── sessions/            # セッション情報
│   └── feedback/            # フィードバック情報
└── src/                     # ソースコード
    ├── modules/             # 標準モジュール
    │   ├── Main.bas         # メインモジュール
    │   └── Utilities.bas    # ユーティリティモジュール
    ├── forms/               # フォーム
    │   └── UserForm1.frm    # サンプルフォーム
    └── class-modules/       # クラスモジュール
        └── DataProcessor.cls # データ処理クラス
```

## AI駆動開発のポイント

### メタデータの活用
各モジュールの先頭には`@ai-metadata`コメントブロックを配置し、AIが理解しやすい形でメタ情報を提供しています。

```vba
' @ai-metadata {
'   "purpose": "メインモジュール",
'   "dependencies": ["Utilities.bas"],
'   "exports": ["Initialize", "Main"],
'   "lastModified": "2025-03-20"
' }
```

### AI用コンテキスト情報
`ai-context`ディレクトリには、AIが参照・更新する情報を集約しています。タスク、セッション、フィードバックの情報を構造化して管理します。

## VBAコードの管理

### エクスポート/インポート
VBAコードはバイナリ形式（.xlsm, .accdb等）で保存されるため、テキストベースのバージョン管理のために以下のアプローチを使用します：

1. VBAコードをテキストファイル（.bas, .cls, .frm）としてエクスポート
2. テキストファイルをバージョン管理
3. 必要に応じてVBAプロジェクトにインポート

### 推奨ツール
- [VBA-Toolbox](https://github.com/example/vba-toolbox)（仮想リンク）: VBAコードのエクスポート/インポートを自動化

## カスタマイズ方法
1. `project-metadata.json`のプロジェクト情報を更新
2. `Main.bas`の初期化処理とメイン処理を実装
3. 必要に応じてフォームとクラスモジュールを追加

## ライセンス
OSSとして公開（ライセンスを指定）

================
File: README.md
================
# knoa - AI駆動開発プロジェクト

## 概要
knoaは、AI駆動開発を統制された情報フローの下で効率的に実施するためのプロジェクトです。「すべてをまずは機械向けに正しく構造化し、必要に応じて人間向けに変換する」という基本理念に基づいています。

## 構造
- `core/`: AI駆動開発の共通コアコンポーネント
- `projects/`: 個別プロジェクトディレクトリ（サブモジュール）
- `docs/`: プロジェクト全体のドキュメント

## 導入フェーズ
1. **フェーズ0**: ミニマルAI駆動開発基盤の構築（ブートストラップ）
2. **フェーズ1**: 情報フロー基盤の構築
3. **フェーズ2**: DDD的な役割分離の導入
4. **フェーズ3**: TDD（テスト駆動開発）の組み込み
5. **フェーズ4**: 設計原則・手法のルール化
6. **フェーズ5**: BDDとCI/CD連携の確立

## 使い方
1. 新規プロジェクトを開始する場合は、`docs/project-templates`から適切なテンプレートを選択
2. プロジェクト用のリポジトリを作成し、テンプレートをコピー
3. knoaリポジトリにサブモジュールとして追加

## ライセンス
プライベートリポジトリ - 無断複製・配布禁止
