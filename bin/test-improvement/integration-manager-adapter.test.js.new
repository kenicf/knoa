/**
 * IntegrationManagerAdapterのテスト
 */

const IntegrationManagerAdapter = require('../../../src/lib/adapters/integration-manager-adapter');
const { 
  setupAdapterTest,
  createMockIntegrationManager
} = require('../helpers/adapter-test-helper');
const { 
  runErrorHandlingTests,
  runRecoverabilityTests,
  runValidationTests
} = require('../helpers/common-adapter-tests');
const { 
  runErrorHierarchyTest,
  runErrorCodeTest,
  runErrorContextTest
} = require('../helpers/error-hierarchy-tests');
const { 
  runErrorEventTest
} = require('../helpers/error-event-tests');
const { 
  runContextAwareTest,
  runContextErrorHandlingTest
} = require('../helpers/context-aware-tests');
const { 
  runBoundaryValueTests
} = require('../helpers/boundary-value-tests');
const { 
  runAsyncTests
} = require('../helpers/async-error-tests');

describe('IntegrationManagerAdapter', () => {
  let testEnv;
  
  beforeEach(() => {
    // テスト環境のセットアップ
    testEnv = setupAdapterTest({
      AdapterClass: IntegrationManagerAdapter,
      managerType: 'integration'
    });
  });
  
  afterEach(() => {
    // モックのリセット
    testEnv.resetMocks();
  });
  
  // 基本機能のテスト
  describe('基本機能', () => {
    test('インスタンスが正しく作成される', () => {
      expect(testEnv.adapter).toBeInstanceOf(IntegrationManagerAdapter);
      expect(testEnv.adapter.manager).toBe(testEnv.mockManager);
      expect(testEnv.adapter.eventEmitter).toBe(testEnv.eventEmitter);
      expect(testEnv.adapter.logger).toBe(testEnv.mockLogger);
    });

    test('マネージャーが指定されていない場合はエラーが発生する', () => {
      expect(() => {
        new IntegrationManagerAdapter(null, {
          eventEmitter: testEnv.eventEmitter,
          logger: testEnv.mockLogger
        });
      }).toThrow('Manager is required');
    });
  });

  // initializeWorkflowのテスト
  describe('initializeWorkflow', () => {
    test('ワークフローを初期化し、イベントを発行する', async () => {
      const projectData = { id: 'P001', name: 'テストプロジェクト' };
      
      const result = await testEnv.adapter.initializeWorkflow(projectData);
      
      expect(testEnv.mockManager.initializeWorkflow).toHaveBeenCalledWith(projectData);
      expect(result).toMatchObject({
        projectId: 'P001',
        initialized: true
      });
      
      // イベント発行のテスト
      const workflowInitializedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:workflow_initialized');
      expect(workflowInitializedEvent).toBeDefined();
      expect(workflowInitializedEvent.data.projectId).toBe('P001');
      expect(workflowInitializedEvent.data.timestamp).toBeDefined();
    });
  });

  // startSessionのテスト
  describe('startSession', () => {
    test('セッションを開始し、イベントを発行する', async () => {
      const options = { previousSessionId: 'S000' };
      
      const result = await testEnv.adapter.startSession(options);
      
      expect(testEnv.mockManager.startSession).toHaveBeenCalledWith(options);
      expect(result).toMatchObject({
        sessionId: 'S001',
        started: true
      });
      
      // イベント発行のテスト
      const sessionStartedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:session_started');
      expect(sessionStartedEvent).toBeDefined();
      expect(sessionStartedEvent.data.sessionId).toBe('S001');
      expect(sessionStartedEvent.data.timestamp).toBeDefined();
    });
  });

  // endSessionのテスト
  describe('endSession', () => {
    test('セッションを終了し、イベントを発行する', async () => {
      const sessionId = 'S001';
      
      const result = await testEnv.adapter.endSession(sessionId);
      
      expect(testEnv.mockManager.endSession).toHaveBeenCalledWith(sessionId);
      expect(result).toMatchObject({
        sessionId: 'S001',
        ended: true
      });
      
      // イベント発行のテスト
      const sessionEndedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:session_ended');
      expect(sessionEndedEvent).toBeDefined();
      expect(sessionEndedEvent.data.sessionId).toBe('S001');
      expect(sessionEndedEvent.data.timestamp).toBeDefined();
    });
  });

  // createTaskのテスト
  describe('createTask', () => {
    test('タスクを作成し、イベントを発行する', async () => {
      const taskData = { title: 'テストタスク', description: 'テスト説明' };
      
      const result = await testEnv.adapter.createTask(taskData);
      
      expect(testEnv.mockManager.createTask).toHaveBeenCalledWith(taskData);
      expect(result).toMatchObject({
        id: 'T001',
        title: 'テストタスク',
        description: 'テスト説明',
        created: true
      });
      
      // イベント発行のテスト
      const taskCreatedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:task_created');
      expect(taskCreatedEvent).toBeDefined();
      expect(taskCreatedEvent.data.id).toBe('T001');
      expect(taskCreatedEvent.data.title).toBe('テストタスク');
      expect(taskCreatedEvent.data.timestamp).toBeDefined();
    });
  });

  // updateTaskStatusのテスト
  describe('updateTaskStatus', () => {
    test('タスク状態を更新し、イベントを発行する', async () => {
      const taskId = 'T001';
      const status = 'in_progress';
      
      const result = await testEnv.adapter.updateTaskStatus(taskId, status);
      
      expect(testEnv.mockManager.updateTaskStatus).toHaveBeenCalledWith(taskId, status);
      expect(result).toMatchObject({
        id: 'T001',
        status: 'in_progress',
        previousStatus: 'pending'
      });
      
      // イベント発行のテスト
      const taskStatusUpdatedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:task_status_updated');
      expect(taskStatusUpdatedEvent).toBeDefined();
      expect(taskStatusUpdatedEvent.data.id).toBe('T001');
      expect(taskStatusUpdatedEvent.data.status).toBe('in_progress');
      expect(taskStatusUpdatedEvent.data.previousStatus).toBe('pending');
      expect(taskStatusUpdatedEvent.data.timestamp).toBeDefined();
    });
  });

  // collectFeedbackのテスト
  describe('collectFeedback', () => {
    test('フィードバックを収集し、イベントを発行する', async () => {
      const taskId = 'T001';
      const feedbackData = { content: 'テストフィードバック' };
      
      const result = await testEnv.adapter.collectFeedback(taskId, feedbackData);
      
      expect(testEnv.mockManager.collectFeedback).toHaveBeenCalledWith(taskId, feedbackData);
      expect(result).toMatchObject({
        id: 'F001',
        taskId: 'T001',
        content: 'テストフィードバック'
      });
      
      // イベント発行のテスト
      const feedbackCollectedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:feedback_collected');
      expect(feedbackCollectedEvent).toBeDefined();
      expect(feedbackCollectedEvent.data.id).toBe('F001');
      expect(feedbackCollectedEvent.data.taskId).toBe('T001');
      expect(feedbackCollectedEvent.data.content).toBe('テストフィードバック');
      expect(feedbackCollectedEvent.data.timestamp).toBeDefined();
    });
  });

  // resolveFeedbackのテスト
  describe('resolveFeedback', () => {
    test('フィードバックを解決し、イベントを発行する', async () => {
      const feedbackId = 'F001';
      const resolution = { action: 'fixed', comment: '修正しました' };
      
      const result = await testEnv.adapter.resolveFeedback(feedbackId, resolution);
      
      expect(testEnv.mockManager.resolveFeedback).toHaveBeenCalledWith(feedbackId, resolution);
      expect(result).toMatchObject({
        id: 'F001',
        resolved: true,
        resolution: { action: 'fixed', comment: '修正しました' }
      });
      
      // イベント発行のテスト
      const feedbackResolvedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:feedback_resolved');
      expect(feedbackResolvedEvent).toBeDefined();
      expect(feedbackResolvedEvent.data.id).toBe('F001');
      expect(feedbackResolvedEvent.data.resolution.action).toBe('fixed');
      expect(feedbackResolvedEvent.data.timestamp).toBeDefined();
    });
  });

  // syncComponentsのテスト
  describe('syncComponents', () => {
    test('コンポーネント間の同期を実行し、イベントを発行する', async () => {
      const result = await testEnv.adapter.syncComponents();
      
      expect(testEnv.mockManager.syncComponents).toHaveBeenCalled();
      expect(result).toMatchObject({
        synced: true
      });
      
      // イベント発行のテスト
      const componentsSyncedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:components_synced');
      expect(componentsSyncedEvent).toBeDefined();
      expect(componentsSyncedEvent.data.timestamp).toBeDefined();
    });
  });

  // generateReportのテスト
  describe('generateReport', () => {
    test('レポートを生成し、イベントを発行する', async () => {
      const options = { format: 'markdown', includeDetails: true };
      
      const result = await testEnv.adapter.generateReport(options);
      
      expect(testEnv.mockManager.generateReport).toHaveBeenCalledWith(options);
      expect(result).toMatchObject({
        content: expect.stringContaining('統合レポート')
      });
      
      // イベント発行のテスト
      const reportGeneratedEvent = testEnv.emittedEvents.find(e => e.name === 'integration:report_generated');
      expect(reportGeneratedEvent).toBeDefined();
      expect(reportGeneratedEvent.data.timestamp).toBeDefined();
    });
  });

  // getWorkflowStatusのテスト
  describe('getWorkflowStatus', () => {
    test('ワークフロー状態を取得する', async () => {
      const result = await testEnv.adapter.getWorkflowStatus();
      
      expect(testEnv.mockManager.getWorkflowStatus).toHaveBeenCalled();
      expect(result).toMatchObject({
        state: 'task_in_progress',
        activeComponents: ['session', 'task']
      });
    });
  });
  
  // 共通テスト関数を使用したテスト
  
  // エラー処理テスト
  runErrorHandlingTests(
    testEnv.adapter,
    testEnv.mockManager,
    [
      { methodName: 'initializeWorkflow', args: [{ id: 'P001' }], errorMessage: '初期化エラー' },
      { methodName: 'startSession', args: [{}], errorMessage: 'セッション開始エラー' },
      { methodName: 'endSession', args: ['S001'], errorMessage: 'セッション終了エラー' },
      { methodName: 'createTask', args: [{ title: 'テストタスク' }], errorMessage: 'タスク作成エラー' },
      { methodName: 'updateTaskStatus', args: ['T001', 'in_progress'], errorMessage: 'タスク状態更新エラー' },
      { methodName: 'collectFeedback', args: ['T001', { content: 'テスト' }], errorMessage: 'フィードバック収集エラー' },
      { methodName: 'resolveFeedback', args: ['F001', { action: 'fixed' }], errorMessage: 'フィードバック解決エラー' },
      { methodName: 'syncComponents', args: [], errorMessage: '同期エラー' },
      { methodName: 'generateReport', args: [{ format: 'markdown' }], errorMessage: 'レポート生成エラー' },
      { methodName: 'getWorkflowStatus', args: [], errorMessage: '状態取得エラー' }
    ],
    testEnv.mockLogger
  );
  
  // 回復可能性テスト
  runRecoverabilityTests(
    testEnv.adapter,
    testEnv.mockManager,
    'createTask',
    [{ title: 'テストタスク' }],
    testEnv.mockLogger
  );
  
  // バリデーションテスト
  runValidationTests(
    testEnv.adapter,
    'updateTaskStatus',
    ['taskId', 'status'],
    testEnv.mockLogger
  );
  
  // エラー階層テスト
  runErrorHierarchyTest(
    testEnv.adapter,
    testEnv.mockManager,
    'createTask',
    [{ title: 'エラーテストタスク' }],
    testEnv.mockLogger
  );
  
  // エラーコードテスト
  runErrorCodeTest(
    testEnv.adapter,
    testEnv.mockManager,
    'createTask',
    [{ title: 'エラーコードテストタスク' }],
    testEnv.mockLogger
  );
  
  // エラーコンテキストテスト
  runErrorContextTest(
    testEnv.adapter,
    testEnv.mockManager,
    'createTask',
    [{ title: 'コンテキストテストタスク' }],
    testEnv.mockLogger
  );
  
  // エラーイベントテスト
  runErrorEventTest(
    testEnv.adapter,
    testEnv.mockManager,
    testEnv.eventEmitter,
    'createTask',
    [{ title: 'イベントテストタスク' }],
    'integrationmanager',
    testEnv.mockLogger
  );
  
  // コンテキスト対応テスト
  runContextAwareTest(
    testEnv.adapter,
    testEnv.mockManager,
    testEnv.eventEmitter,
    'createTask',
    [{ title: 'コンテキストテストタスク' }],
    testEnv.mockLogger
  );
  
  // コンテキストエラー処理テスト
  runContextErrorHandlingTest(
    testEnv.adapter,
    testEnv.mockManager,
    testEnv.eventEmitter,
    'createTask',
    [{ title: 'コンテキストエラーテストタスク' }],
    testEnv.mockLogger
  );
  
  // 境界値テスト
  runBoundaryValueTests(
    testEnv.adapter,
    'createTask',
    [{ title: '境界値テストタスク' }],
    0,
    {
      longString: true,
      specialChars: true,
      circularRef: true,
      largeData: true,
      emptyData: false
    },
    testEnv.mockLogger
  );
  
  // 非同期テスト
  runAsyncTests(
    testEnv.adapter,
    testEnv.mockManager,
    testEnv.eventEmitter,
    'createTask',
    [{ title: '非同期テストタスク' }],
    {
      asyncError: true,
      cancellation: true,
      listenerError: true,
      eventName: 'integration:task_created',
      timeout: true,
      timeoutValue: 500,
      concurrency: true,
      concurrencyValue: 3
    },
    testEnv.mockLogger
  );
});